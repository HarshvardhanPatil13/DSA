class Solution {
    public int firstUniqChar(String s) {
        int freq[]=new int[26];

        Queue<Integer> q = new LinkedList<>();

        for(int i=0;i<s.length();i++)
        {
            char ch=s.charAt(i);
            q.add(i);
            freq[ch-'a']++;

            while(!q.isEmpty() && freq[s.charAt(q.peek())-'a']>1)
            {
                q.remove();
            }
        }

        if(!q.isEmpty())
        {
            return q.peek();
        }
        return -1;
    }
}

/*
    class Solution {
    public int firstUniqChar(String s) {
        int freq[] = new int[26];  // To store the frequency of each character (a-z)

        Queue<Integer> q = new LinkedList<>();  // Queue to store the indices of characters

        // First, calculate the frequency of each character
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            freq[ch - 'a']++;
            q.add(i);  // Add index of character to the queue
        }

        // Process the queue to find the first unique character
        while (!q.isEmpty()) {
            int idx = q.peek();  // Get the index of the first character in the queue
            char ch = s.charAt(idx);
            if (freq[ch - 'a'] == 1) {
                return idx;  // If frequency is 1, return the index of the unique character
            }
            q.remove();  // Otherwise, remove this character and continue
        }

        return -1;  // If no unique character is found, return -1
    }
}

*/
