/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {

        // 1. Find midNode
        // 2. Reverse 2nd half linked list
        // 3. Check if left and right half is equal

        if(head==null || head.next == null)
        {
            return true;
        }
        ListNode slow = head;
        ListNode fast = head;

        while(fast!=null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }

       ListNode midnode = slow;

       // 2. Reverse 2nd half linked list
        ListNode prev = null;
        ListNode curr = midnode;
        ListNode next;

        while(curr != null)
        {
            next = curr.next;
            curr.next=prev;
            prev = curr;
            curr = next;
        } 

        // 3. Check if left and right half is equal
        ListNode left = head ;
        ListNode right = prev;

        while(right != null)
        {
            if(left.val != right.val)
            {
                return false;
            }
            left=left.next;
            right=right.next;
        }

        return true;
        
    }
}
